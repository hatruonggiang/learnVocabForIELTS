import sys
import random
import pandas as pd
import os
from PyQt6.QtCore import QStringListModel,QTimer
from PyQt6.QtWidgets import (
    QWidget, QLabel, QPushButton, QVBoxLayout, QApplication,
    QMessageBox, QComboBox, QHBoxLayout,QListView
)
from src.utils import TextToSpeechApp  # Nh·∫≠p h√†m x·ª≠ l√Ω ph√°t √¢m t·ª´ utils.py

def resource_path(relative_path):
        """Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c cho c√°c t√†i nguy√™n, x·ª≠ l√Ω tr∆∞·ªùng h·ª£p ·ª©ng d·ª•ng ch·∫°y d∆∞·ªõi d·∫°ng .exe"""
        try:
            if hasattr(sys, '_MEIPASS'):
                # ƒê∆∞·ªùng d·∫´n khi ·ª©ng d·ª•ng ƒë√£ ƒë∆∞·ª£c ƒë√≥ng g√≥i th√†nh .exe
                return os.path.join(sys._MEIPASS, relative_path)
            else:
                # ƒê∆∞·ªùng d·∫´n trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn
                return os.path.join(os.getcwd(), relative_path)
        except Exception as e:
            print(f"Error resolving resource path: {e}")
            return None
class FlashcardApp(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.vocab_list = []
        self.df = None
        self.current_word = ""
        self.init_ui()
        self.apply_flashcard_style()  # √Åp d·ª•ng QSS ri√™ng cho Flashcard

         # Thi·∫øt l·∫≠p QTimer cho vi·ªác ph√°t √¢m ƒë·ªãnh k·ª≥
        self.speech_timer = QTimer(self)
        self.speech_timer.setInterval(3000)  # 2 gi√¢y
        self.speech_timer.timeout.connect(self.speak_current_word)

    def init_ui(self):
        self.top_labbel = QLabel("üìÇ Ch·ªçn file t·ª´ v·ª±ng:",self)
        self.word_label = QLabel("", self)
        self.toggle_button = QPushButton("Hi·ªán nghƒ©a", self)
        self.next_button = QPushButton("Ti·∫øp", self)
        self.remember_button = QPushButton("‚úì Nh·ªõ", self)
        self.forget_button = QPushButton("‚úó Qu√™n", self)
        self.csv_combo = QComboBox(self)

        self.meaning_label = QListView(self)
        self.model = QStringListModel()  # D√πng QStringListModel ƒë·ªÉ qu·∫£n l√Ω danh s√°ch nghƒ©a
        self.text_to_speech = TextToSpeechApp()
        self.meaning_label.setModel(self.model)

        # T·∫Øt c√°c n√∫t khi ch∆∞a c√≥ d·ªØ li·ªáu
        for btn in [self.toggle_button, self.next_button, self.remember_button, self.forget_button]:
            btn.setEnabled(False)
        self.meaning_label.setVisible(False)


        self.csv_dir = resource_path('datas')
        if not self.csv_dir or not os.path.exists(self.csv_dir):
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c 'datas'.")
            return

        self.is_speaking = False  # C·ªù ki·ªÉm tra tr·∫°ng th√°i ph√°t √¢m
        # Load danh s√°ch file t·ª´ datas
        self.load_csv_files()
        self.csv_combo.currentIndexChanged.connect(self.load_selected_csv)
        self.toggle_button.clicked.connect(self.toggle_meaning)
        self.next_button.clicked.connect(self.show_random_card)
        self.remember_button.clicked.connect(lambda: self.update_count(remembered=True))
        self.forget_button.clicked.connect(lambda: self.update_count(remembered=False))

        # Layout
        layout = QVBoxLayout()
        layout.addWidget(self.top_labbel)
        layout.addWidget(self.csv_combo)
        layout.addWidget(self.word_label)
        layout.addWidget(self.meaning_label)
        layout.addWidget(self.toggle_button)
        layout.addWidget(self.next_button)

        btn_row = QHBoxLayout()
        btn_row.addWidget(self.forget_button)
        btn_row.addWidget(self.remember_button)
        layout.addLayout(btn_row)

        self.setLayout(layout)
        self.setWindowTitle("üìò Flashcard H·ªçc T·ª´ V·ª±ng")
    
    def load_csv_files(self):
        if not os.path.exists(self.csv_dir):
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ch·ª©a file CSV.")
            return

        # T·∫£i danh s√°ch c√°c file CSV trong th∆∞ m·ª•c 'datas'
        csv_files = [f for f in os.listdir(self.csv_dir) if f.endswith('.csv')]
        self.csv_combo.clear()
        self.csv_combo.addItems(csv_files)

    def load_selected_csv(self):
        selected_csv = self.csv_combo.currentText()
        if not selected_csv:
            return
        # path = os.path.abspath(os.path.join("datas", filename))
        path = os.path.abspath(os.path.join(self.csv_dir, selected_csv))
        if os.path.exists(path):
            try:
                self.df = pd.read_csv(path)
                if 'word' not in self.df.columns or 'meaning_vi' not in self.df.columns:
                    QMessageBox.warning(self, "Sai ƒë·ªãnh d·∫°ng", "File CSV ph·∫£i c√≥ c·ªôt 'word' v√† 'meaning_vi'.")
                    return
                if 'count' not in self.df.columns:
                    self.df['count'] = 0
                self.vocab_list = self.df.to_dict('records')
                for btn in [self.toggle_button, self.next_button, self.remember_button, self.forget_button]:
                    btn.setEnabled(True)
                self.show_random_card()
            except Exception as e:
                QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file CSV: {str(e)}")

    def show_random_card(self):
        if not self.vocab_list:
            self.word_label.setText("Kh√¥ng c√≥ t·ª´ v·ª±ng.")
            return

        # ∆Øu ti√™n t·ª´ c√≥ count th·∫•p
        self.vocab_list.sort(key=lambda x: x.get('count', 0))
        selected = random.choice(self.vocab_list[:min(10, len(self.vocab_list))])
        self.current_word = selected['word']

        word = selected['word']
        meaning = selected.get('meaning_vi', '(Kh√¥ng c√≥ nghƒ©a)')

        # Hi·ªÉn th·ªã t·ª´
        self.word_label.setText(f"<h2>{word}</h2>")

        # C·∫≠p nh·∫≠t nghƒ©a v√†o model c·ªßa QListView
        self.model.setStringList([meaning])  # ƒê∆∞a nghƒ©a v√†o danh s√°ch
        self.meaning_label.setVisible(False)  # Ban ƒë·∫ßu kh√¥ng hi·ªÉn th·ªã nghƒ©a
        self.toggle_button.setText("Hi·ªán nghƒ©a")
        
        self.speak_current_word()
        self.speech_timer.start()



    def toggle_meaning(self):
        if self.meaning_label.isVisible():
            self.meaning_label.setVisible(False)
            self.toggle_button.setText("Hi·ªán nghƒ©a")
        else:
            # L·∫•y nghƒ©a v√† v√≠ d·ª•
            word_datas = next((item for item in self.vocab_list if item['word'] == self.current_word), {})
            meaning = word_datas.get('meaning_vi', '(Kh√¥ng c√≥ nghƒ©a)')
            example = word_datas.get('examples', '')
            
            text = [meaning]
            if example:
                text.append(f"üí¨ {example}")  # Th√™m v√≠ d·ª• v√†o danh s√°ch

            self.model.setStringList(text)  # C·∫≠p nh·∫≠t danh s√°ch nghƒ©a trong model
            self.meaning_label.setVisible(True)  # Hi·ªÉn th·ªã nghƒ©a
            self.toggle_button.setText("·∫®n nghƒ©a")



    def update_count(self, remembered=True):
        word = self.current_word
        idx = self.df[self.df['word'] == word].index
        if not idx.empty:
            i = idx[0]
            self.df.at[i, 'count'] = self.df.at[i, 'count'] + (1 if remembered else -2)
            # Ghi l·∫°i file
            file_path = os.path.abspath(os.path.join("datas", self.csv_combo.currentText()))

            # Ghi datasFrame v√†o t·ªáp CSV
            self.df.to_csv(file_path, index=False)
            # C·∫≠p nh·∫≠t vocab_list
            self.vocab_list = self.df.to_dict('records')
        self.show_random_card()
    
    def apply_flashcard_style(self):
        style_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "../styles/flashcard.qss"))

        with open(style_path, "r", encoding="utf-8") as f:
            self.setStyleSheet(f.read())

# ph√°t √¢m
    def speak_current_word(self):
        
        """Ph√°t √¢m t·ª´ hi·ªán t·∫°i trong word_label"""
        self.is_speaking = True
        text = self.word_label.text()
        text = text.replace("<h2>", "").replace("</h2>", "")
        print(text)
        self.text_to_speech.speak(text)  # G·ªçi h√†m ph√°t √¢m t·ª´ utils.py            self.is_speaking = False
   
    def stop_speaking(self):
        """D·ª´ng vi·ªác ph√°t √¢m"""
        self.speech_timer.stop()
