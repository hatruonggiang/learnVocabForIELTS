import sys
import os
import shutil
from PyQt5.QtWidgets import (
    QApplication, QWidget, QPushButton, QVBoxLayout,QHBoxLayout, QLabel,
    QFileDialog, QTextEdit,QFrame,QTableWidget,QTableWidgetItem,QStackedWidget,QStyleFactory
)
from PyQt5.QtCore import Qt
import pandas as pd
from games.flashcard.app import FlashcardApp
from games.quiz.app import QuizApp
from src.data import DataManager

class VocabApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Vocabulary Extractor")
        self.setGeometry(100, 100, 1000, 400)
        self.label = QLabel(self)  # Kh·ªüi t·∫°o thu·ªôc t√≠nh label
        self.init_ui()

        self.layout = QVBoxLayout()

    def init_ui(self):
        # Layout ch√≠nh: chia d·ªçc (sidebar tr√°i, content ph·∫£i)
        main_layout = QHBoxLayout(self)
        main_layout.setContentsMargins(10, 10, 10, 10)  # Th√™m margin ƒë·ªÉ kh√¥ng d√≠nh v√†o vi·ªÅn

        # === Sidebar tr√°i ===
        self.sidebar = QFrame()
        self.sidebar.setFixedWidth(200)
        sidebar_layout = QVBoxLayout(self.sidebar)

        # C√°c n√∫t tr√™n sidebar
        self.btn_data = QPushButton("üìÇ Menu Data")
        self.btn_upload = QPushButton("üì§ Upload PDF")
        self.btn_process = QPushButton("‚öôÔ∏è X·ª≠ l√Ω")
        self.btn_flashcard = QPushButton("üìö Flashcard")
        self.btn_quiz = QPushButton("üéÆ Quiz")



        # Th√™m n√∫t v√†o layout
        for btn in [self.btn_data, self.btn_upload, self.btn_process, self.btn_flashcard,self.btn_quiz]:
            btn.setMinimumHeight(40)
            sidebar_layout.addWidget(btn)

        sidebar_layout.addStretch()  # ƒê·∫©y n√∫t l√™n ƒë·∫ßu

        # === Content ch√≠nh b√™n ph·∫£i ===
        self.content = QFrame()
        self.content_layout = QVBoxLayout(self.content)

        self.label = QLabel("Ch√†o m·ª´ng ƒë·∫øn v·ªõi ·ª©ng d·ª•ng l·ªçc t·ª´ PDF!")

        # === QTableWidget ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ ===
        self.table_widget = QTableWidget(self)
        self.table_widget.setColumnCount(4)  # 4 c·ªôt: word, meaning, meaning VN, example
        self.table_widget.setHorizontalHeaderLabels(["Word", "Meaning", "Meaning VN", "Example"])

        # C√†i ƒë·∫∑t layout cho content
        self.content_layout.addWidget(self.label)
        self.content_layout.addWidget(self.table_widget)

        # Th√™m ph·∫ßn sidebar v√† content v√†o layout ch√≠nh
        main_layout.addWidget(self.sidebar)
        main_layout.addWidget(self.content)

        # K·∫øt n·ªëi c√°c n√∫t
        self.btn_data.clicked.connect(self.open_data_manager)
        self.btn_upload.clicked.connect(self.choose_file)
        self.btn_process.clicked.connect(self.process_pdf)
        self.btn_flashcard.clicked.connect(self.show_flashcard)
        self.btn_quiz.clicked.connect(self.show_quiz)

        self.pdf_path = None
        self.setLayout(main_layout)

        # Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc c·ª≠a s·ªï ban ƒë·∫ßu
        self.setWindowTitle("·ª®ng D·ª•ng L·ªçc T·ª´ V·ª±ng")
        self.setGeometry(100, 100, 800, 600)  # K√≠ch th∆∞·ªõc c·ª≠a s·ªï ban ƒë·∫ßu

    def open_data_manager(self):
    # X√≥a widget c≈© trong content layout
        for i in reversed(range(self.content_layout.count())):
            widget_to_remove = self.content_layout.itemAt(i).widget()
            if widget_to_remove:
                widget_to_remove.setParent(None)

        # T·∫°o DataManager v√† ch√®n v√†o layout
        self.data_manager = DataManager()
        self.content_layout.addWidget(self.data_manager)

    def choose_file(self):
        file_name, _ = QFileDialog.getOpenFileName(self, "Ch·ªçn file PDF", "", "PDF files (*.pdf)")
        if file_name:
            # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
            dest_dir = os.path.join("data", "pdfs")
            os.makedirs(dest_dir, exist_ok=True)

            # Copy file v√†o th∆∞ m·ª•c data/pdfs/
            base_name = os.path.basename(file_name)
            dest_path = os.path.join(dest_dir, base_name)
            shutil.copy(file_name, dest_path)

            self.pdf_path = dest_path
            self.label.setText(f"ƒê√£ t·∫£i v√†o: {dest_path}")

    def process_pdf(self):
        self.label.setText("ƒêang x·ª≠ l√Ω, vui l√≤ng ch·ªù...")

        try:
            from src.make_word_from_pdf import process_pdf,load_vi_dict_from_txt  # ƒê·∫£m b·∫£o t√™n h√†m n√†y ƒë√∫ng v·ªõi file b·∫°n c√≥

            input_folder = "data/pdfs"
            output_folder = "data/outputs"
            master_file = "data/master.csv"

            os.makedirs(output_folder, exist_ok=True)  # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i

            vocab_list = []

            for filename in os.listdir(input_folder):
                if filename.lower().endswith(".pdf"):
                    pdf_path = os.path.join(input_folder, filename)
                    base_name = os.path.splitext(filename)[0]
                    output_csv = os.path.join(output_folder, f"{base_name}.csv")
                    vi_dict_path = "data/pdfs/data.txt"

                    if not os.path.exists(output_csv):
                        print(f"\nüöÄ ƒêang x·ª≠ l√Ω: {filename}")
                        vocab_list = process_pdf(pdf_path, master_file, output_csv, vi_dict_path)
                    else:
                        print(f"‚è≠Ô∏è B·ªè qua (ƒë√£ c√≥ CSV): {filename}")

                        
            
            self.table_widget.clearContents()  # X√≥a d·ªØ li·ªáu c≈© trong b·∫£ng
            self.table_widget.setRowCount(0)  # ƒê·∫∑t l·∫°i s·ªë d√≤ng
            
            
            if vocab_list.empty:
                print("Kh√¥ng c√≥ d·ªØ li·ªáu.")
            else:
                print(f"D·ªØ li·ªáu c√≥ {len(vocab_list)} t·ª´ v·ª±ng.")

            if not vocab_list.empty:
                self.label.setText("‚úÖ ƒê√£ x·ª≠ l√Ω xong.")
                for idx, row in vocab_list.iterrows():
                    row_position = self.table_widget.rowCount()
                    self.table_widget.insertRow(row_position)

                    def make_item(text):
                        item = QTableWidgetItem(str(text))
                        item.setToolTip(str(text))  # Hi·ªán to√†n b·ªô khi hover
                        item.setTextAlignment(Qt.AlignTop)
                        item.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        return item

                    self.table_widget.setItem(row_position, 0, make_item(row['word']))
                    self.table_widget.setItem(row_position, 1, make_item(row['meaning']))
                    self.table_widget.setItem(row_position, 2, make_item(row['meaning_vi']))
                    self.table_widget.setItem(row_position, 3, make_item(row['examples']))

                # T·ª± ƒë·ªông gi√£n k√≠ch th∆∞·ªõc ph√π h·ª£p n·ªôi dung
                # self.table_widget.resizeColumnsToContents()
                self.table_widget.resizeRowsToContents()

            else:
                self.label.setText("‚ÑπÔ∏è Kh√¥ng c√≥ t·ª´ v·ª±ng m·ªõi.")

        except Exception as e:
            self.label.setText(f"‚ùå L·ªói: {str(e)}")

        except Exception as e:
            self.label.setText(f"‚ùå L·ªói: {str(e)}")
    
    def show_flashcard(self):
        # X√≥a t·∫•t c·∫£ widget hi·ªán t·∫°i trong content_layout
        for i in range(self.content_layout.count()):
            widget = self.content_layout.itemAt(i).widget()
            if widget:
                widget.deleteLater()

        # Th√™m giao di·ªán Flashcard v√†o content_layout
        self.flashcard_app = FlashcardApp(self)
        self.content_layout.addWidget(self.flashcard_app)

    def show_quiz(self):
        # X√≥a t·∫•t c·∫£ widget hi·ªán t·∫°i trong content_layout
        for i in range(self.content_layout.count()):
            widget = self.content_layout.itemAt(i).widget()
            if widget:
                widget.deleteLater()

        # Th√™m giao di·ªán Flashcard v√†o content_layout
        vocab_csv = "data/outputs/sample.csv"  # ho·∫∑c file c·ª• th·ªÉ b·∫°n mu·ªën ch∆°i
        self.quiz_app = QuizApp(vocab_csv)
        self.quiz_app.show()
        self.content_layout.addWidget(self.quiz_app)

if __name__ == "__main__":
    app = QApplication(sys.argv)

    app.setStyle(QStyleFactory.create("Fusion"))
    style_path = os.path.join(os.path.dirname(__file__), "styles", "main.qss")
    with open(style_path, "r", encoding ="utf-8") as f:
        app.setStyleSheet(f.read())
    window = VocabApp()
    window.show()
    sys.exit(app.exec_())
