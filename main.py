import sys
import os
import shutil
from PyQt6.QtWidgets import (
    QApplication, QWidget, QPushButton, QVBoxLayout,QHBoxLayout, QLabel,
    QFileDialog, QTextEdit,QFrame,QTableWidget,QTableWidgetItem,QStackedWidget,QStyleFactory
)
from PyQt6.QtCore import Qt
import pandas as pd
from games.flashcard.app import FlashcardApp
from games.quiz.app import QuizApp
from src.data import DataManager

class VocabApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Vocabulary Extractor")
        self.setGeometry(100, 100, 1400, 400)
        self.label = QLabel(self)  # Kh·ªüi t·∫°o thu·ªôc t√≠nh label
        self.init_ui()

        self.layout = QVBoxLayout()
        self.current_widget = None
        self.show_welcome()



    def init_ui(self):
        # Layout ch√≠nh: chia d·ªçc (sidebar tr√°i, content ph·∫£i)
        main_layout = QHBoxLayout(self)
        main_layout.setContentsMargins(10, 10, 10, 10)  # Th√™m margin ƒë·ªÉ kh√¥ng d√≠nh v√†o vi·ªÅn

        # === Sidebar tr√°i ===
        self.sidebar = QFrame()
        self.sidebar.setFixedWidth(200)
        sidebar_layout = QVBoxLayout(self.sidebar)

        # C√°c n√∫t tr√™n sidebar
        self.btn_data = QPushButton("üìÇ Menu Data")
        self.btn_upload = QPushButton("üì§ Upload PDF")
        self.btn_process = QPushButton("‚öôÔ∏è X·ª≠ l√Ω")
        self.btn_flashcard = QPushButton("üìö Flashcard")
        self.btn_quiz = QPushButton("üéÆ Quiz")



        # Th√™m n√∫t v√†o layout
        for btn in [self.btn_data, self.btn_upload, self.btn_process, self.btn_flashcard,self.btn_quiz]:
            btn.setMinimumHeight(40)
            sidebar_layout.addWidget(btn)

        sidebar_layout.addStretch()  # ƒê·∫©y n√∫t l√™n ƒë·∫ßu

        # === Content ch√≠nh b√™n ph·∫£i ===
        self.content = QFrame()
        self.content_layout = QVBoxLayout(self.content)

        # self.label = QLabel("Ch√†o m·ª´ng ƒë·∫øn v·ªõi ·ª©ng d·ª•ng l·ªçc t·ª´ PDF!")

        # === QTableWidget ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ ===
        self.table_widget = QTableWidget(self)
        self.table_widget.setColumnCount(4)  # 4 c·ªôt: word, meaning, meaning VN, example
        self.table_widget.setHorizontalHeaderLabels(["Word", "Meaning", "Meaning VN", "Example"])


        # Th√™m ph·∫ßn sidebar v√† content v√†o layout ch√≠nh
        main_layout.addWidget(self.sidebar)
        main_layout.addWidget(self.content)

        # K·∫øt n·ªëi c√°c n√∫t
        self.btn_data.clicked.connect(self.open_data_manager)
        self.btn_upload.clicked.connect(self.choose_file)
        self.btn_process.clicked.connect(self.process_pdf)
        self.btn_flashcard.clicked.connect(self.show_flashcard)
        self.btn_quiz.clicked.connect(self.show_quiz)

        self.pdf_path = None
        self.setLayout(main_layout)

        # Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc c·ª≠a s·ªï ban ƒë·∫ßu
        self.setWindowTitle("·ª®ng D·ª•ng L·ªçc T·ª´ V·ª±ng")
        self.setGeometry(100, 100, 1000, 600)  # K√≠ch th∆∞·ªõc c·ª≠a s·ªï ban ƒë·∫ßu
    def clear_content_layout(self):
        while self.content_layout.count():
            item = self.content_layout.takeAt(0)
            widget = item.widget()
            if widget is not None:
                widget.setParent(None)
                widget.deleteLater()
            else:
                # N·∫øu l√† layout l·ªìng nhau
                sub_layout = item.layout()
                if sub_layout is not None:
                    while sub_layout.count():
                        sub_item = sub_layout.takeAt(0)
                        sub_widget = sub_item.widget()
                        if sub_widget:
                            sub_widget.setParent(None)
                            sub_widget.deleteLater()


    def switch_feature(self, new_widget):
        # D·ª´ng widget c≈© n·∫øu c·∫ßn
        if self.current_widget and hasattr(self.current_widget, 'stop'):
            self.current_widget.stop()

        # X√≥a s·∫°ch layout
        self.clear_content_layout()

        # Th√™m widget m·ªõi v√†o
        self.content_layout.addWidget(new_widget)
        self.current_widget = new_widget

    def show_welcome(self):
        self.clear_content_layout()

        label = QLabel("Ch√†o m·ª´ng ƒë·∫øn v·ªõi ·ª©ng d·ª•ng l·ªçc t·ª´ PDF!")
        self.table_widget = QTableWidget(self)
        self.table_widget.setColumnCount(4)
        self.table_widget.setHorizontalHeaderLabels(["Word", "Meaning", "Meaning VN", "Example"])

        self.content_layout.addWidget(label)
        self.content_layout.addWidget(self.table_widget)

        self.current_widget = self.table_widget  # G√°n cho ti·ªán d·ªçn n·∫øu c·∫ßn

    def open_data_manager(self):
    # # X√≥a widget c≈© trong content layout
    #     for i in reversed(range(self.content_layout.count())):
    #         widget_to_remove = self.content_layout.itemAt(i).widget()
    #         if widget_to_remove:
    #             widget_to_remove.setParent(None)

        # T·∫°o DataManager v√† ch√®n v√†o layout
        self.clear_content_layout()
        self.data_manager = DataManager()
        self.content_layout.addWidget(self.data_manager)

    def choose_file(self):
        file_name, _ = QFileDialog.getOpenFileName(self, "Ch·ªçn file PDF", "", "PDF files (*.pdf)")
        if file_name:
            self.pdf_path = file_name
            self.label.setText(f"ƒê√£ ch·ªçn file: {file_name}")

    def process_pdf(self):
        self.label.setText("ƒêang x·ª≠ l√Ω, vui l√≤ng ch·ªù...")

        try:
            from src.make_word_from_pdf import process_pdf,load_vi_dict_from_txt  # ƒê·∫£m b·∫£o t√™n h√†m n√†y ƒë√∫ng v·ªõi file b·∫°n c√≥
            output_folder = "data/outputs"
            master_file = "data/outputs/master.csv"

            os.makedirs(output_folder, exist_ok=True)  # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i

            if not self.pdf_path:
                self.label.setText("‚ùó Vui l√≤ng ch·ªçn m·ªôt file PDF tr∆∞·ªõc.")
                return

            from src.make_word_from_pdf import process_pdf, load_vi_dict_from_txt

            output_folder = "data/outputs"
            master_file = "data/outputs/master.csv"
            os.makedirs(output_folder, exist_ok=True)

            base_name = os.path.splitext(os.path.basename(self.pdf_path))[0]
            output_csv = os.path.join(output_folder, f"{base_name}.csv")
            vi_dict_path = "data/pdfs/data.txt"  # gi·ªØ nguy√™n n·∫øu b·∫°n v·∫´n d√πng file n√†y ·ªü ƒë√≥

            if not os.path.exists(output_csv):
                print(f"\nüöÄ ƒêang x·ª≠ l√Ω: {self.pdf_path}")
                vocab_list = process_pdf(self.pdf_path, master_file, output_csv, vi_dict_path)
            else:
                print(f"‚è≠Ô∏è B·ªè qua (ƒë√£ c√≥ CSV): {output_csv}")

        except Exception as e:
            self.label.setText(f"‚ùå L·ªói: {str(e)}")
    
    def show_flashcard(self):
        # # X√≥a t·∫•t c·∫£ widget hi·ªán t·∫°i trong content_layout
        # for i in range(self.content_layout.count()):
        #     widget = self.content_layout.itemAt(i).widget()
        #     if widget:
        #         widget.deleteLater()

        # # Th√™m giao di·ªán Flashcard v√†o content_layout
        self.clear_content_layout()
        self.flashcard_app = FlashcardApp(self)
        self.content_layout.addWidget(self.flashcard_app)

    def show_quiz(self):
        # # X√≥a t·∫•t c·∫£ widget hi·ªán t·∫°i trong content_layout
        # for i in range(self.content_layout.count()):
        #     widget = self.content_layout.itemAt(i).widget()
        #     if widget:
        #         widget.deleteLater()

        # # Th√™m giao di·ªán Flashcard v√†o content_layout
        vocab_csv = "data/outputs/sample.csv"  # ho·∫∑c file c·ª• th·ªÉ b·∫°n mu·ªën ch∆°i
        self.quiz_app = QuizApp(vocab_csv)
        self.quiz_app.show()
        self.content_layout.addWidget(self.quiz_app)

    def resource_path(relative_path):
        """ Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ƒë√∫ng trong ch·∫ø ƒë·ªô ch·∫°y .exe ho·∫∑c khi debug """
        if hasattr(sys, '_MEIPASS'):
            return os.path.join(sys._MEIPASS, relative_path)
        return os.path.join(os.path.abspath("."), relative_path)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    
    app.setStyle(QStyleFactory.create("Fusion"))
    abc = "styles/main.qss"
    if hasattr(sys, '_MEIPASS'):
        qss_path = os.path.join(sys._MEIPASS, abc)
    else: qss_path = os.path.join(os.path.abspath("."), abc)
    with open(qss_path, "r") as f:
        app.setStyleSheet(f.read())
    style_path = os.path.join(os.path.dirname(__file__), 'styles', 'main.qss')

    with open(qss_path, "r", encoding ="utf-8") as f:
        app.setStyleSheet(f.read())
    window = VocabApp()
    window.show()
    sys.exit(app.exec())
